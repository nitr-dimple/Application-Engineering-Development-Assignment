/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Admin;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityCatalog;
import model.Community;
import model.Encounter;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author Dimple Patel
 */
public class PatientDirectoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonDirectoryJPanel
     */
    private JPanel adminBodyJPanel;
    private PersonDirectory personDirectory;
    private CityCatalog cityCatalog;
    private PatientDirectory patientDirectory;

    public PatientDirectoryJPanel(JPanel adminBodyJPanel, PersonDirectory personDirectory, CityCatalog cityCatalog, PatientDirectory patientDirectory) {
        this.adminBodyJPanel = adminBodyJPanel;
        this.personDirectory = personDirectory;
        this.cityCatalog = cityCatalog;
        this.patientDirectory = patientDirectory;
        initComponents();
        refreshCombo();
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPersonId = new javax.swing.JTextField();
        lblSearch1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        btnSearchById = new javax.swing.JButton();
        btnAddPerson1 = new javax.swing.JButton();
        lblSearch2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPerson1 = new javax.swing.JTable();
        btnViewHistory = new javax.swing.JButton();
        btnAllAbnormalPatient = new javax.swing.JButton();
        cmbCity = new javax.swing.JComboBox<>();
        lblCity = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        cmbCommunity = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        txtPersonId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblSearch1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSearch1.setForeground(new java.awt.Color(0, 102, 102));
        lblSearch1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearch1.setText("Patient List :");

        tblPerson.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblPerson.getTableHeader().setFont(new Font("Tahoma", 1, 18));
        tblPerson.getTableHeader().setForeground(new java.awt.Color(0, 102, 102));
        tblPerson.getTableHeader().setOpaque(false);
        tblPerson.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient Id", "Patient Name", "Abnormal"
            }
        ));
        tblPerson.setRowHeight(25);
        tblPerson.setSelectionBackground(new java.awt.Color(0, 102, 102));
        jScrollPane1.setViewportView(tblPerson);

        btnSearchById.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchById.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearchById.setForeground(new java.awt.Color(0, 102, 102));
        btnSearchById.setText("Search by Patient ID");
        btnSearchById.setBorderPainted(false);
        btnSearchById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByIdActionPerformed(evt);
            }
        });

        btnAddPerson1.setBackground(new java.awt.Color(255, 255, 255));
        btnAddPerson1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAddPerson1.setForeground(new java.awt.Color(0, 102, 102));
        btnAddPerson1.setText("Refresh Table");
        btnAddPerson1.setBorderPainted(false);
        btnAddPerson1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPerson1ActionPerformed(evt);
            }
        });

        lblSearch2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSearch2.setForeground(new java.awt.Color(0, 102, 102));
        lblSearch2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearch2.setText("Encounter History :");

        tblPerson1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblPerson1.getTableHeader().setFont(new Font("Tahoma", 1, 18));
        tblPerson1.getTableHeader().setForeground(new java.awt.Color(0, 102, 102));
        tblPerson1.getTableHeader().setOpaque(false);
        tblPerson1.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        tblPerson1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter Date", "Blood Pressure", "Heart Rate", "Temparature", "Abnormal"
            }
        ));
        tblPerson1.setRowHeight(25);
        tblPerson1.setSelectionBackground(new java.awt.Color(0, 102, 102));
        jScrollPane2.setViewportView(tblPerson1);

        btnViewHistory.setBackground(new java.awt.Color(0, 102, 102));
        btnViewHistory.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnViewHistory.setForeground(new java.awt.Color(255, 255, 255));
        btnViewHistory.setText("View Encounter History");
        btnViewHistory.setBorderPainted(false);
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });

        btnAllAbnormalPatient.setBackground(new java.awt.Color(0, 102, 102));
        btnAllAbnormalPatient.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAllAbnormalPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnAllAbnormalPatient.setText("All Abonormal Patient");
        btnAllAbnormalPatient.setBorderPainted(false);
        btnAllAbnormalPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllAbnormalPatientActionPerformed(evt);
            }
        });

        cmbCity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCity.setForeground(new java.awt.Color(0, 102, 102));
        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCity.setForeground(new java.awt.Color(0, 102, 102));
        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCity.setText("Abnormal Patient in City :");

        lblCommunity.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCommunity.setForeground(new java.awt.Color(0, 102, 102));
        lblCommunity.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCommunity.setText("Abnormal Patient in Community :");

        cmbCommunity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCommunity.setForeground(new java.awt.Color(0, 102, 102));
        cmbCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCommunityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnSearchById, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddPerson1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(btnAllAbnormalPatient))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnViewHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSearch1)
                                        .addGap(29, 29, 29)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 953, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1076, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchById, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPerson1)
                        .addComponent(btnAllAbnormalPatient))
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnViewHistory)
                .addGap(5, 5, 5)
                .addComponent(lblSearch2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(349, 349, 349))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByIdActionPerformed
        // TODO add your handling code here:
        Long patientId;
        try {
            patientId = Long.parseLong(txtPersonId.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Enter Valid Id", "error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        for (Patient p : patientDirectory.getPatientDirectory()) {
            if (p.getId().equals(patientId)) {
                Object row[] = new Object[2];
                row[0] = p;
                Person person = personDirectory.getPersonDirectory().stream().filter(per -> per.getId() == p.getPersonId()).collect(Collectors.toList()).get(0);
                row[1] = person.getFirstName() + " " + person.getLastName();
                model.addRow(row);
                break;
            }

        }

    }//GEN-LAST:event_btnSearchByIdActionPerformed

    private void btnAddPerson1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPerson1ActionPerformed
        // TODO add your handling code here:
        txtPersonId.setText("");
        refreshTable();
    }//GEN-LAST:event_btnAddPerson1ActionPerformed

    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPerson.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Patient patient = (Patient) tblPerson.getValueAt(selectedRowIndex, 0);

        DefaultTableModel model = (DefaultTableModel) tblPerson1.getModel();
        model.setRowCount(0);
        for (Encounter encounter : patient.getEncounterHistory().getEncounterList()) {
            Object row[] = new Object[5];
            row[0] = (encounter.getDate().getMonth() + 1) + "-" + (encounter.getDate().getDate() ) + "-" + (encounter.getDate().getYear() + 1900);
            row[1] = encounter.getVitalSigns().getBloodPressure();
            row[2] = encounter.getVitalSigns().getHeartRate();
            row[3] = encounter.getVitalSigns().getTemperature();
            row[4] = encounter.getVitalSigns().isIsAbnormal() ? "Yes" : "No";
            model.addRow(row);
        }
    }//GEN-LAST:event_btnViewHistoryActionPerformed

    private void btnAllAbnormalPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllAbnormalPatientActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        for (Patient p : patientDirectory.getPatientDirectory()) {
            if (!p.isIsNormal()) {
                Object row[] = new Object[3];
                row[0] = p;
                Person person = personDirectory.getPersonDirectory().stream().filter(per -> per.getId() == p.getPersonId()).collect(Collectors.toList()).get(0);
                row[1] = person.getFirstName() + " " + person.getLastName();
                row[2] = p.isIsNormal() ? "No" : "Yes";
                model.addRow(row);
            }
        }

    }//GEN-LAST:event_btnAllAbnormalPatientActionPerformed

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:
        cmbCommunity.removeAllItems();
        if(cmbCity.getSelectedItem() != "All") {
            City c = (City) cmbCity.getSelectedItem();
            cmbCommunity.addItem("All");
            c.getCommunityList().forEach(community -> {
            cmbCommunity.addItem(community);
        });
        }
        listAllCityAbnormal();
    }//GEN-LAST:event_cmbCityActionPerformed

    private void cmbCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCommunityActionPerformed
        // TODO add your handling code here:
        if(cmbCommunity.getSelectedItem() != null) {
        
            Object c = cmbCommunity.getSelectedItem();
        
            if (c.equals("All")) {
            listAllCityAbnormal();
                } else {

                    DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
                    model.setRowCount(0);
                    Community community = (Community) cmbCommunity.getSelectedItem();
                    for (House house : community.getHouseList()) {
                        for (Person person : house.getPersonList()) {
                            if (!person.getPatient().isIsNormal()) {
                                Object row[] = new Object[3];
                                row[0] = person.getPatient();
                                row[1] = person.getFirstName() + " " + person.getLastName();
                                row[2] = person.getPatient().isIsNormal() ? "No" : "Yes";
                                model.addRow(row);
                            }

                        }
                    }
                }
        }
        
    }//GEN-LAST:event_cmbCommunityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPerson1;
    private javax.swing.JButton btnAllAbnormalPatient;
    private javax.swing.JButton btnSearchById;
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JComboBox<Object> cmbCommunity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblSearch1;
    private javax.swing.JLabel lblSearch2;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTable tblPerson1;
    private javax.swing.JTextField txtPersonId;
    // End of variables declaration//GEN-END:variables

    public void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        for (Patient p : patientDirectory.getPatientDirectory()) {
            Object row[] = new Object[3];
            row[0] = p;
            Person person = personDirectory.getPersonDirectory().stream().filter(per -> per.getId() == p.getPersonId()).collect(Collectors.toList()).get(0);
            row[1] = person.getFirstName() + " " + person.getLastName();
            row[2] = p.isIsNormal() ? "No" : "Yes";
            model.addRow(row);
        }
    }

    private void refreshCombo() {
        cmbCity.removeAllItems();
        cmbCommunity.removeAllItems();
        cmbCity.addItem("All");
        cityCatalog.getCityList().forEach(city -> {
            cmbCity.addItem(city);
        });
    }

    private void listAllCityAbnormal() {
        Object city = cmbCity.getSelectedItem();
        if (city.equals("All")) {
            DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
            model.setRowCount(0);
            for (Patient p : patientDirectory.getPatientDirectory()) {
                if (!p.isIsNormal()) {
                    Object row[] = new Object[3];
                    row[0] = p;
                    Person person = personDirectory.getPersonDirectory().stream().filter(per -> per.getId() == p.getPersonId()).collect(Collectors.toList()).get(0);
                    row[1] = person.getFirstName() + " " + person.getLastName();
                    row[2] = p.isIsNormal() ? "No" : "Yes";
                    model.addRow(row);
                }
            }
        } else {
            City c = (City) cmbCity.getSelectedItem();

            DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
            model.setRowCount(0);
            for (Community community : c.getCommunityList()) {
                for (House house : community.getHouseList()) {
                    for (Person person : house.getPersonList()) {
                        if (!person.getPatient().isIsNormal()) {
                            Object row[] = new Object[3];
                            row[0] = person.getPatient();
                            row[1] = person.getFirstName() + " " + person.getLastName();
                            row[2] = person.getPatient().isIsNormal() ? "No" : "Yes";
                            model.addRow(row);
                        }

                    }
                }
            }
        }
    }
}

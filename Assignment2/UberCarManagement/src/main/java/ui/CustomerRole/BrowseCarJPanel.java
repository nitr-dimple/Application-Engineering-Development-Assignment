package ui.CustomerRole;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.util.Date;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.Supplier;
import model.SupplierDirectory;
import ui.SupplierRole.LoginSupplierJPanel;

/**
 *
 * @author Dimple Patel
 */
public class BrowseCarJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrowseCarJPanel
     */
    private JPanel userProcessContainer;
    private SupplierDirectory supplierDirectory;
    Supplier sup = new Supplier();

    public BrowseCarJPanel(JPanel upc, SupplierDirectory sd) {
        initComponents();
        this.userProcessContainer = upc;
        this.supplierDirectory = sd;
        sup.setSupplyName("All");
        refreshTable();
        populateCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblProductCatalogue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        btnBookCar = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbAvail = new javax.swing.JComboBox<>();
        lblTotalCarAvail = new javax.swing.JLabel();
        txtManuYear = new javax.swing.JTextField();
        btnManuYear = new javax.swing.JButton();
        txtMin = new javax.swing.JTextField();
        lblMin = new javax.swing.JLabel();
        txtMax = new javax.swing.JTextField();
        lblMax = new javax.swing.JLabel();
        btnMinMax = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnSerialNo = new javax.swing.JButton();
        txtModel = new javax.swing.JTextField();
        btnModel = new javax.swing.JButton();
        btnManufacturer = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        btnCity = new javax.swing.JButton();
        btnMainExp = new javax.swing.JButton();
        lblFleetUpdate = new javax.swing.JLabel();
        btnFirstAvailCar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Corbel", 0, 24)); // NOI18N
        jLabel1.setText("Search for Car");

        lblProductCatalogue.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        lblProductCatalogue.setText("Car Catalog :");

        tblProductCatalog.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplier Name", "Model", "Manufacturig Year", "Seats", "Serial No.", "City", "Expiry Year", "Available", "Distance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);
        if (tblProductCatalog.getColumnModel().getColumnCount() > 0) {
            tblProductCatalog.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblProductCatalog.getColumnModel().getColumn(1).setPreferredWidth(60);
            tblProductCatalog.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblProductCatalog.getColumnModel().getColumn(3).setPreferredWidth(30);
            tblProductCatalog.getColumnModel().getColumn(4).setPreferredWidth(100);
            tblProductCatalog.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblProductCatalog.getColumnModel().getColumn(6).setPreferredWidth(70);
            tblProductCatalog.getColumnModel().getColumn(7).setPreferredWidth(50);
            tblProductCatalog.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        btnBookCar.setText("Book Car");
        btnBookCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookCarActionPerformed(evt);
            }
        });

        lblSupplier.setText("                  Supplier :");

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        jLabel2.setText("                 Available :");

        cmbAvail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAvailActionPerformed(evt);
            }
        });

        lblTotalCarAvail.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        lblTotalCarAvail.setText("12");

        txtManuYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManuYearActionPerformed(evt);
            }
        });

        btnManuYear.setText("Search by Manufacturing Year");
        btnManuYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManuYearActionPerformed(evt);
            }
        });

        txtMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinActionPerformed(evt);
            }
        });

        lblMin.setText("min :");

        txtMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxActionPerformed(evt);
            }
        });

        lblMax.setText("max :");

        btnMinMax.setText("Search by Min and Max no. of Seats");
        btnMinMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinMaxActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSerialNo.setText("Search Car by Serial No.");
        btnSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNoActionPerformed(evt);
            }
        });

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });

        btnModel.setText("Search by Model Number");
        btnModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelActionPerformed(evt);
            }
        });

        btnManufacturer.setText("List of all manufacturer by Uber");
        btnManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturerActionPerformed(evt);
            }
        });

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        btnCity.setText("Car Available in City");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnMainExp.setText("Car whose Maintenance Certificate is expired");
        btnMainExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainExpActionPerformed(evt);
            }
        });

        lblFleetUpdate.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        lblFleetUpdate.setText("12");

        btnFirstAvailCar.setText("Search First Available Car");
        btnFirstAvailCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnFirstAvailCar)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSupplier)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmbAvail, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cmbSupplier, 0, 81, Short.MAX_VALUE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(265, 265, 265)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lblMin)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblMax)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtModel, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtManuYear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnManuYear)
                                            .addComponent(btnMinMax)
                                            .addComponent(btnModel)))
                                    .addComponent(lblProductCatalogue)
                                    .addComponent(lblTotalCarAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFleetUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnCity))
                                            .addComponent(btnMainExp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnSerialNo, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnManufacturer, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(86, 86, 86)
                                        .addComponent(btnBookCar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(29, Short.MAX_VALUE))))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, lblProductCatalogue, lblSupplier});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbAvail, cmbSupplier});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnManuYear, btnMinMax, btnModel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnManufacturer, btnSerialNo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel1))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManuYear)
                    .addComponent(txtManuYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbAvail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMin)
                    .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMax)
                    .addComponent(btnMinMax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModel)
                    .addComponent(btnFirstAvailCar))
                .addGap(18, 18, 18)
                .addComponent(lblProductCatalogue)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBookCar)
                        .addGap(97, 97, 97))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSerialNo)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnManufacturer)
                            .addComponent(btnMainExp))
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalCarAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFleetUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        populateCarTable();
    }//GEN-LAST:event_cmbSupplierActionPerformed

    /**
     * Method to populate table by availability of car
     * @param evt 
     */
    private void cmbAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAvailActionPerformed
        // TODO add your handling code here:
        String s = (String) cmbAvail.getSelectedItem();

        if (s == null || s.equals("All"))
            this.refreshTable();
        else if (s.equals("Yes")) {
            DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
            model.setRowCount(0);

            for (Supplier supplier : supplierDirectory.getSupplierlist()) {
                for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                    if (car.isIsAvailable()) {
                        Object row[] = new Object[9];
                        row[0] = supplier;
                        row[1] = car;
                        row[2] = car.getManufacturingYear();
                        row[3] = car.getNoOfSeats();
                        row[4] = car.getSerialNo();
                        row[5] = car.getCity();
                        row[6] = car.getMaintenanceExpiryDate();
                        row[7] = car.isIsAvailable() ? "Yes" : "No";
                        row[8] = car.getDistance();
                        model.addRow(row);

                    }
                }
            }
        } else {
            DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
            model.setRowCount(0);

            for (Supplier supplier : supplierDirectory.getSupplierlist()) {
                for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                    if (!car.isIsAvailable()) {
                        Object row[] = new Object[9];
                        row[0] = supplier;
                        row[1] = car;
                        row[2] = car.getManufacturingYear();
                        row[3] = car.getNoOfSeats();
                        row[4] = car.getSerialNo();
                        row[5] = car.getCity();
                        row[6] = car.getMaintenanceExpiryDate();
                        row[7] = car.isIsAvailable() ? "Yes" : "No";
                        row[8] = car.getDistance();
                        model.addRow(row);
                    }
                }
            }
        }
    }//GEN-LAST:event_cmbAvailActionPerformed

    /**
     * Method to populate table by manufacturing year of car
     * @param evt 
     */
    private void btnManuYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManuYearActionPerformed
        // TODO add your handling code here:
        Integer year;
        try {
            year = Integer.parseInt(txtManuYear.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Enter Valid Year", "error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        supplierDirectory.getSupplierlist().forEach(supplier
                -> {
            for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                if (car.getManufacturingYear().equals(year)) {
                    Object row[] = new Object[9];
                    row[0] = supplier;
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                }
            }
        });
        
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No car is manufactured in year:  " + txtManuYear.getText(), "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }


    }//GEN-LAST:event_btnManuYearActionPerformed

    private void txtManuYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManuYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManuYearActionPerformed

    private void txtMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinActionPerformed

    private void txtMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxActionPerformed

    /**
     * Method to populate table by min max number of seats
     * @param evt 
     */
    private void btnMinMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinMaxActionPerformed
        // TODO add your handling code here:
        Integer min, max;
        try {
            min = Integer.parseInt(txtMin.getText());
            max = Integer.parseInt(txtMax.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Enter valid min max value", "error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (min > max) {
            JOptionPane.showMessageDialog(this, "Min value can not be greater than max value", "error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        supplierDirectory.getSupplierlist().forEach(supplier
                -> {
            for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                if (car.getNoOfSeats() >= min && car.getNoOfSeats() <= max) {
                    Object row[] = new Object[9];
                    row[0] = supplier;
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                }
            }
        });
        
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No car found with no of seats between :  " + txtMin.getText() + " to " + txtMax.getText(), "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }
    }//GEN-LAST:event_btnMinMaxActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * book car method
     * @param evt 
     */
    private void btnBookCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookCarActionPerformed
        // TODO add your handling code here:
        
        int row = tblProductCatalog.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Supplier spl = (Supplier) tblProductCatalog.getValueAt(row, 0);
        Car cr = (Car) tblProductCatalog.getValueAt(row, 1);

        for(Car car : spl.getCarCatalog().getCarCatalog()){
            if(car.equals(cr))
            {
                if(car.isIsAvailable()) {
                    car.setIsAvailable(false);
                    JOptionPane.showMessageDialog(null, "Successfully booked car!!", "Info", JOptionPane.INFORMATION_MESSAGE);

                }
                else  JOptionPane.showMessageDialog(null, "Selected Car is not available", "Warning", JOptionPane.WARNING_MESSAGE);
                SupplierDirectory.date = new Date();
                this.refreshTable();
                return;
            }
        }
        

    }//GEN-LAST:event_btnBookCarActionPerformed

    /**
     * Search car by given serial number
     * @param evt 
     */
    private void btnSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNoActionPerformed
        // TODO add your handling code here:
        SearchForCarJPanel scjp = new SearchForCarJPanel(userProcessContainer, supplierDirectory);
        userProcessContainer.add("SearchForCarJPanel", scjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnSerialNoActionPerformed

    /**
     * search car by given model number
     * @param evt 
     */
    private void btnModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        supplierDirectory.getSupplierlist().forEach(supplier
                -> {
            for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                if (car.getModel().equalsIgnoreCase(txtModel.getText())) {
                    Object row[] = new Object[9];
                    row[0] = supplier;
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                }
            }
        });
        
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No car found with given Model no.", "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }
    }//GEN-LAST:event_btnModelActionPerformed

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    /**
     * Search all manufacturer
     * @param evt 
     */
    private void btnManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturerActionPerformed
        // TODO add your handling code here:
        ManufacturerListJPanel mfjp = new ManufacturerListJPanel(userProcessContainer, supplierDirectory);
        userProcessContainer.add("ManufacturerListJPanel", mfjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManufacturerActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    /**
     * search car by city
     * @param evt 
     */
    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        // TODO add your handling code here:
        
        if(txtCity.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Please Enter City ", "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        supplierDirectory.getSupplierlist().forEach(supplier
                -> {
            for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                if (car.getCity().equalsIgnoreCase(txtCity.getText()) && car.isIsAvailable()) {
                    Object row[] = new Object[9];
                    row[0] = supplier;
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                }
            }
        });
        
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No car available in city : " + txtCity.getText(), "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnMainExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainExpActionPerformed
        // TODO add your handling code here:
        Date date = new Date();
        Integer year = date.getYear() + 1900;
//        System.out.println(date);
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        supplierDirectory.getSupplierlist().forEach(supplier
                -> {
            for (Car car : supplier.getCarCatalog().getCarCatalog()) {
                if (car.getMaintenanceExpiryDate() < year) {
                    Object row[] = new Object[9];
                    row[0] = supplier;
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                }
            }
        });
        
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "None of the car have expired maintenance ceritificate ", "Info", JOptionPane.INFORMATION_MESSAGE);
            this.refreshTable();
            return;
        }
    }//GEN-LAST:event_btnMainExpActionPerformed

    /**
     * search first available car
     * @param evt 
     */
    private void btnFirstAvailCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailCarActionPerformed
        // TODO add your handling code here:

        Integer min = Integer.MAX_VALUE;
        Car car = new Car();
        Supplier s = new Supplier();
        int count = 0;
        for (Supplier supplier : supplierDirectory.getSupplierlist()) {
            for (Car c : supplier.getCarCatalog().getCarCatalog()) {
                if (c.isIsAvailable() && c.getDistance() < min) {
                    min = c.getDistance();
                    car = c;
                    s = supplier;
                    count++;
                }
            }

        };
        if (count == 0) {
            JOptionPane.showMessageDialog(this, "Currently, no car is available", "info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        Object row[] = new Object[9];
        row[0] = s;
        row[1] = car;
        row[2] = car.getManufacturingYear();
        row[3] = car.getNoOfSeats();
        row[4] = car.getSerialNo();
        row[5] = car.getCity();
        row[6] = car.getMaintenanceExpiryDate();
        row[7] = car.isIsAvailable() ? "Yes" : "No";
        row[8] = car.getDistance();
        model.addRow(row);

    }//GEN-LAST:event_btnFirstAvailCarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBookCar;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnFirstAvailCar;
    private javax.swing.JButton btnMainExp;
    private javax.swing.JButton btnManuYear;
    private javax.swing.JButton btnManufacturer;
    private javax.swing.JButton btnMinMax;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnSerialNo;
    private javax.swing.JComboBox<String> cmbAvail;
    private javax.swing.JComboBox<Object> cmbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFleetUpdate;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMin;
    private javax.swing.JLabel lblProductCatalogue;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblTotalCarAvail;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtManuYear;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtModel;
    // End of variables declaration//GEN-END:variables

    /**
     * Method for updating table
     */
    public void refreshTable() {
//        tblProductCatalog.getTableHeader().setPreferredSize(new Dimension(tblProductCatalog.getColumnModel().getTotalColumnWidth(), 70));
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        AtomicInteger count = new AtomicInteger(0);

        supplierDirectory.getSupplierlist().forEach(suppllier -> {
            Object row[] = new Object[9];
            row[0] = suppllier;
            suppllier.getCarCatalog().getCarCatalog().forEach(car -> {
                row[1] = car;
                row[2] = car.getManufacturingYear();
                row[3] = car.getNoOfSeats();
                row[4] = car.getSerialNo();
                row[5] = car.getCity();
                row[6] = car.getMaintenanceExpiryDate();
                row[7] = car.isIsAvailable() ? "Yes" : "No";
                row[8] = car.getDistance();
                model.addRow(row);
                if (car.isIsAvailable()) {
                    count.getAndIncrement();
                }
            });
        });
        lblTotalCarAvail.setText("Total Car Available : " + count.toString());
        lblFleetUpdate.setText("Last time Fleet Catalog Updated at : " + SupplierDirectory.date);

    }

    private void populateCombo() {
        cmbSupplier.removeAllItems();
        cmbSupplier.addItem(sup);
        for (Supplier s : supplierDirectory.getSupplierlist()) {
            cmbSupplier.addItem(s);
        }
        cmbAvail.removeAllItems();
        cmbAvail.addItem("All");
        cmbAvail.addItem("Yes");
        cmbAvail.addItem("No");
    }

   /**
    * Method for populating table on the basis of supplier name
    */
    
    private void populateCarTable() {
        Supplier selectedSupplier = (Supplier) cmbSupplier.getSelectedItem();

        if (selectedSupplier == null || selectedSupplier == sup) {
            this.refreshTable();
        } else {
            supplierDirectory.getSupplierlist().stream().filter(supplier -> supplier == selectedSupplier).forEach(supplier -> {
                DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
                model.setRowCount(0);
                Object row[] = new Object[9];
                row[0] = supplier;

                supplier.getCarCatalog().getCarCatalog().forEach(car -> {
                    row[1] = car;
                    row[2] = car.getManufacturingYear();
                    row[3] = car.getNoOfSeats();
                    row[4] = car.getSerialNo();
                    row[5] = car.getCity();
                    row[6] = car.getMaintenanceExpiryDate();
                    row[7] = car.isIsAvailable() ? "Yes" : "No";
                    row[8] = car.getDistance();
                    model.addRow(row);
                });
            });
        }
    }

    private void totalAvailableCar() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
